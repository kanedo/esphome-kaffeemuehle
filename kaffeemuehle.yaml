esphome:
  name: kaffeemuehle
  platform: ESP32
  board: az-delivery-devkit-v4

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kaffeemuehle Fallback Hotspot"
    password: !secret ap_password

captive_portal:

web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

font:  
  - file: "fonts/roboto.ttf"    
    id: roboto    
    size: 20

globals:
   - id: grind_start_time
     type: int
     restore_value: no
     initial_value: '0'
   - id: grind_run_time
     type: int
     restore_value: no
     initial_value: '0'

number:
  - platform: template
    id: grind_time_sec
    name: "Mahlzeit"
    restore_value: true
    optimistic: true
    initial_value: 4.0
    min_value: 0.0
    max_value: 60.0
    step: 0.1
    unit_of_measurement: "s"
    icon: "mdi:timer-outline"

interval:
  - interval: 1ms
    then:
      - if:
          condition:
            lambda: |-
              return id(grind_start_time) != 0;
          then:
            - lambda: |- 
                id(grind_run_time) = millis() - id(grind_start_time);
            #- logger.log: 
            #    format: "Zone run time %.1f"
            #    args: [ 'id(grind_run_time)' ]
          else:
            - lambda: |-
                id(grind_run_time) = 0;


display:  
  - platform: st7735    
    model: "INITR_18BLACKTAB"    
    reset_pin: GPIO4    
    cs_pin: GPIO32    
    dc_pin: GPIO5    
    rotation: 90    
    device_width: 128    
    device_height: 160    
    col_start: 0    
    row_start: 0    
    eight_bit_color: true    
    update_interval: 0.1s    
    lambda: |-        
      if(id(grind).state == 1) {
        it.printf(21, 21, id(roboto), "Mahlzeit: %.1fs", max(id(grind_time_sec).state - double(id(grind_run_time)) / 1000.0 , 0.0 ));
      }else{
        it.printf(21, 21, id(roboto), "Mahlzeit: %.1fs", double(id(grind_time_sec).state));
      }        

switch:
  - platform: gpio
    id: grind
    pin: 25
    name: "Mahlen"
  - platform: template
    name: "grind timer"
    id: grind_timer
    turn_on_action:
      - lambda: |-
          id(grind_start_time) = millis();
      - switch.turn_on: grind
      - delay: !lambda "return id(grind_time_sec).state * 1000;"
      - lambda: |-
          id(grind_start_time) = 0;
      - switch.turn_off: grind
    turn_off_action:
      - switch.turn_off: grind
binary_sensor:
  - platform: gpio
    pin: 
      number: 33
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Button"
    on_press:
      then:
        - switch.turn_on: grind_timer
    # on_release:
    #   then:
    #     - switch.turn_off: grind_time_secr
